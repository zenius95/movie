<div class="row g-4">
    <div class="col-lg-4 col-xl-3">
        <div class="card shadow-sm h-100">
            <div class="card-header d-flex align-items-center">
                <i class="bi bi-gear-fill me-2"></i>
                <h5 class="mb-0">Bảng điều khiển</h5>
            </div>
            <div class="card-body d-flex flex-column">
                <div id="settings-form">
                    <h6>Tùy chọn</h6>
                    <div class="row g-2 mb-3">
                        <div class="col"><label for="maxPages" class="form-label">Trang/DM</label><input type="number" class="form-control form-control-sm" id="maxPages" value="2"></div>
                        <div class="col"><label for="concurrency" class="form-label">Đồng thời</label><input type="number" class="form-control form-control-sm" id="concurrency" value="3"></div>
                    </div>
                    <div class="row g-2 mb-3">
                        <div class="col"><label for="delayPages" class="form-label">Delay Trang</label><input type="number" class="form-control form-control-sm" id="delayPages" value="300"></div>
                        <div class="col"><label for="delayBatches" class="form-label">Delay Lô</label><input type="number" class="form-control form-control-sm" id="delayBatches" value="1000"></div>
                    </div>
                    
                    <h6>Nguồn Đồng bộ</h6>
                    <div class="input-group mb-3">
                        <select class="form-select form-select-sm" id="sync-type" style="flex-grow: 0; width: auto;">
                            <option value="danh-muc" selected>Danh mục</option>
                            <option value="the-loai">Thể loại</option>
                            <option value="quoc-gia">Quốc gia</option>
                            <option value="nam-phat-hanh">Năm</option>
                            <option value="tim-kiem">Từ khóa</option>
                        </select>
                        <select class="form-select form-select-sm" id="sync-value"></select>
                        <input type="text" class="form-control form-control-sm d-none" id="sync-keyword" placeholder="Nhập từ khóa...">
                    </div>
                </div>
                <div class="mt-auto">
                    <div class="d-grid gap-2">
                        <button id="syncButton" class="btn btn-primary btn-lg"><i class="bi bi-arrow-repeat me-2"></i><span id="button-text">Bắt đầu</span></button>
                        <div class="btn-group">
                            <button id="pauseButton" class="btn btn-warning w-50" disabled><i class="bi bi-pause-fill me-1"></i>Tạm dừng</button>
                            <button id="stopButton" class="btn btn-danger w-50" disabled><i class="bi bi-stop-circle-fill me-1"></i>Dừng</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-8 col-xl-9">
        <div class="card shadow-sm mb-4">
            <div class="card-header"><h5 class="mb-0">Tiến trình</h5></div>
            <div class="card-body">
                <div class="progress" role="progressbar" style="height: 25px;">
                    <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" style="width: 0%">0%</div>
                </div>
                <div class="row text-center mt-3">
                    <div class="col"><div class="fs-4 fw-bold" id="stat-found">0</div><div class="text-secondary small">Mục tiêu</div></div>
                    <div class="col text-success"><div class="fs-4 fw-bold" id="stat-success">0</div><div class="text-secondary small">Thành công</div></div>
                    <div class="col text-danger"><div class="fs-4 fw-bold" id="stat-errors">0</div><div class="text-secondary small">Lỗi</div></div>
                </div>
            </div>
        </div>

        <div class="card shadow-sm">
            <div class="card-header"><h5 class="mb-0">Kết quả</h5></div>
            <div class="card-body p-0">
                 <div class="table-responsive" style="max-height: 450px; overflow-y: auto;">
                    <table class="table table-hover table-sm align-middle mb-0">
                        <thead>
                            <tr>
                                <th>Ảnh</th>
                                <th>Tên phim</th>
                                <th>Năm</th>
                                <th>Thể loại</th>
                                <th>Quốc gia</th>
                                <th>Trạng thái</th>
                            </tr>
                        </thead>
                        <tbody id="results-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
         <div class="card shadow-sm mt-4">
            <div class="card-header"><h5 class="mb-0">Log chi tiết</h5></div>
            <div id="log-container" class="card-body" style="max-height: 250px; overflow-y: auto;"></div>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const SOURCE_CATEGORIES = ['phim-moi', 'phim-bo', 'phim-le', 'tv-shows', 'phim-bo-dang-chieu', 'phim-bo-hoan-thanh', 'phim-sap-chieu'];
    const socket = io();
    let isPaused = false;
    let totalMoviesToProcess = 0;
    const elements = {
        syncButton: document.getElementById('syncButton'),
        buttonText: document.getElementById('button-text'),
        pauseButton: document.getElementById('pauseButton'),
        stopButton: document.getElementById('stopButton'),
        logContainer: document.getElementById('log-container'),
        resultsBody: document.getElementById('results-body'),
        progressBar: document.getElementById('progress-bar'),
        statFound: document.getElementById('stat-found'),
        statSuccess: document.getElementById('stat-success'),
        statErrors: document.getElementById('stat-errors'),
        form: document.getElementById('settings-form'),
        inputs: document.querySelectorAll('#settings-form input, #settings-form select'),
        syncType: document.getElementById('sync-type'),
        syncValueSelect: document.getElementById('sync-value')
    };
    
    const ui = {
        setSyncing(isSyncing) {
            elements.syncButton.disabled = isSyncing;
            elements.pauseButton.disabled = !isSyncing;
            elements.stopButton.disabled = !isSyncing;
            elements.buttonText.textContent = isSyncing ? 'Đang chạy...' : 'Bắt đầu';
            elements.inputs.forEach(input => input.disabled = isSyncing);
            if (!isSyncing) this.setPaused(false);
        },
        setPaused(pausedState) {
            isPaused = pausedState;
            elements.pauseButton.innerHTML = isPaused ? '<i class="bi bi-play-fill me-1"></i>Tiếp tục' : '<i class="bi bi-pause-fill me-1"></i>Tạm dừng';
            elements.pauseButton.classList.toggle('btn-warning', !isPaused);
            elements.pauseButton.classList.toggle('btn-info', isPaused);
        },
        reset() {
            this.setSyncing(false);
            elements.logContainer.innerHTML = '';
            elements.resultsBody.innerHTML = '';
            elements.progressBar.style.width = '0%';
            elements.progressBar.textContent = '0%';
            elements.progressBar.classList.remove('bg-success', 'bg-danger');
            elements.progressBar.classList.add('progress-bar-striped', 'progress-bar-animated');
            ['statFound', 'statSuccess', 'statErrors'].forEach(key => elements[key].textContent = '0');
        }
    };

    const settings = {
        get() {
            const maxPagesValue = parseInt(document.getElementById('maxPages').value, 10);
            const delayPagesValue = parseInt(document.getElementById('delayPages').value, 10);
            const delayBatchesValue = parseInt(document.getElementById('delayBatches').value, 10);
            const concurrencyValue = parseInt(document.getElementById('concurrency').value, 10);

            const opts = {
                maxPages: isNaN(maxPagesValue) ? 1 : maxPagesValue,
                delayPages: isNaN(delayPagesValue) ? 500 : delayPagesValue,
                delayBatches: isNaN(delayBatchesValue) ? 1000 : delayBatchesValue,
                concurrency: isNaN(concurrencyValue) ? 5 : concurrencyValue,
                sync_type: elements.syncType.value,
                sync_value: elements.syncType.value === 'tim-kiem' ? document.getElementById('sync-keyword').value : elements.syncValueSelect.value
            };
            localStorage.setItem('syncSettings', JSON.stringify(opts));
            return opts;
        },
        load() {
            const saved = JSON.parse(localStorage.getItem('syncSettings')) || {};
            document.getElementById('maxPages').value = saved.hasOwnProperty('maxPages') ? saved.maxPages : 2;
            document.getElementById('delayPages').value = saved.hasOwnProperty('delayPages') ? saved.delayPages : 300;
            document.getElementById('delayBatches').value = saved.hasOwnProperty('delayBatches') ? saved.delayBatches : 1000;
            document.getElementById('concurrency').value = saved.hasOwnProperty('concurrency') ? saved.concurrency : 3;
            elements.syncType.value = saved.sync_type || 'danh-muc';
        }
    };

    async function populateSelect(selectElement, url, valueKey, nameKey) {
        try {
            const response = await fetch(url);
            const data = await response.json();
            selectElement.innerHTML = '';
            data.data.items.forEach(item => {
                selectElement.innerHTML += `<option value="${item[valueKey]}">${item[nameKey]}</option>`;
            });
        } catch (error) {
            selectElement.innerHTML = '<option value="">Lỗi khi tải</option>';
        }
    }

    function updateSyncValueOptions() {
        const type = elements.syncType.value;
        const valueSelect = elements.syncValueSelect;
        const keywordInput = document.getElementById('sync-keyword');
        valueSelect.classList.toggle('d-none', type === 'tim-kiem');
        keywordInput.classList.toggle('d-none', type !== 'tim-kiem');

        if (type === 'danh-muc') {
            valueSelect.innerHTML = SOURCE_CATEGORIES.map(cat => `<option value="${cat}">${cat.replace(/-/g, ' ')}</option>`).join('');
        } else if (type === 'the-loai') {
            populateSelect(valueSelect, '/api/the-loai', 'slug', 'name');
        } else if (type === 'quoc-gia') {
            populateSelect(valueSelect, '/api/quoc-gia', 'slug', 'name');
        } else if (type === 'nam-phat-hanh') {
            populateSelect(valueSelect, '/api/nam-phat-hanh', 'year', 'year');
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        settings.load();
        updateSyncValueOptions();
        
        elements.syncType.addEventListener('change', updateSyncValueOptions);

        elements.syncButton.addEventListener('click', () => {
            const options = settings.get();
            if (!options.sync_value) {
                alert('Vui lòng chọn hoặc nhập giá trị cho nguồn đồng bộ.');
                return;
            }
            ui.reset();
            ui.setSyncing(true);
            socket.emit('sync:start', options);
        });

        elements.pauseButton.addEventListener('click', () => {
            isPaused = !isPaused;
            socket.emit(isPaused ? 'sync:pause' : 'sync:resume');
            ui.setPaused(isPaused);
        });

        elements.stopButton.addEventListener('click', () => socket.emit('sync:stop'));

        socket.on('sync-log', (data) => {
            const logEntry = document.createElement('div');
            const typeToClass = { 'info': 'text-info-emphasis', 'success': 'text-success', 'error': 'text-danger', 'warning': 'text-warning' };
            logEntry.className = typeToClass[data.type] || 'text-muted';
            logEntry.textContent = `[${data.timestamp}] ${data.message}`;
            elements.logContainer.appendChild(logEntry);
            elements.logContainer.scrollTop = elements.logContainer.scrollHeight;
        });

        socket.on('sync-start', (data) => {
            totalMoviesToProcess = data.total;
            elements.statFound.textContent = totalMoviesToProcess;
        });

        socket.on('sync-progress', (data) => {
            const percentage = totalMoviesToProcess === 0 ? 0 : Math.round((data.processed / totalMoviesToProcess) * 100);
            elements.progressBar.style.width = `${percentage}%`;
            elements.progressBar.textContent = `${percentage}%`;
            elements.statSuccess.textContent = data.success;
            elements.statErrors.textContent = data.errors;
        });

        socket.on('movie-synced', (movie) => {
            if (movie.status === 'created' || movie.status === 'updated') {
                const newRow = elements.resultsBody.insertRow(0);
                const statusClass = movie.status === 'created' ? 'text-bg-success' : 'text-bg-warning';
                
                newRow.innerHTML = `
                    <td><img src="${movie.thumb}" alt="thumb" style="width: 40px; height: 60px; object-fit: cover; border-radius: 4px;"></td>
                    <td>${movie.name}</td>
                    <td><span class="badge text-bg-secondary">${movie.year || ''}</span></td>
                    <td><small>${movie.categories || ''}</small></td>
                    <td><small>${movie.countries || ''}</small></td>
                    <td><span class="badge ${statusClass}">${movie.status}</span></td>
                `;
            }
        });

        socket.on('sync-finished', (status) => {
            ui.setSyncing(false);
            elements.progressBar.classList.remove('progress-bar-animated');
            elements.progressBar.classList.toggle('bg-success', status !== 'stopped');
            elements.progressBar.classList.toggle('bg-danger', status === 'stopped');
        });
    });
</script>