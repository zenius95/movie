<div class="row g-4">
    <div class="col-12">
        <div class="card shadow-sm">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="bi bi-gear-fill me-2"></i>Bảng điều khiển & Cài đặt Đồng bộ</h5>
                <div class="d-flex gap-2">
                    <button id="syncButton" class="btn btn-primary"><i class="bi bi-arrow-repeat me-2"></i><span id="button-text">Bắt đầu</span></button>
                    <button id="pauseButton" class="btn btn-warning" disabled><i class="bi bi-pause-fill me-1"></i>Tạm dừng</button>
                    <button id="stopButton" class="btn btn-danger" disabled><i class="bi bi-stop-circle-fill me-1"></i>Dừng</button>
                </div>
            </div>
            <div class="card-body">
                <div id="settings-form" class="row g-3">
                    <div class="col-md-6">
                        <h5><i class="bi bi-funnel-fill"></i> Nguồn & Lọc</h5>
                        <hr class="mt-1">
                        <div id="source-filters">
                             <label class="form-label">Nguồn Đồng bộ</label>
                             <div class="input-group mb-3">
                                <select class="form-select form-select-sm" id="sync-type" style="flex-grow: 0; width: auto;">
                                    <option value="danh-muc" selected>Danh mục</option>
                                    <option value="the-loai">Thể loại</option>
                                    <option value="quoc-gia">Quốc gia</option>
                                    <option value="nam-phat-hanh">Năm</option>
                                    <option value="tim-kiem">Từ khóa</option>
                                </select>
                                <select class="form-select form-select-sm" id="sync-value"></select>
                                <input type="text" class="form-control form-control-sm d-none" id="sync-keyword" placeholder="Nhập từ khóa...">
                            </div>
                            <label class="form-label">Lọc</label>
                            <div class="row mb-3">
                                <div class="col-4" id="category-filter-container">
                                    <select id="category-filter" class="form-select form-select-sm" data-placeholder="Lọc theo Thể loại"></select>
                                </div>
                                <div class="col-4" id="country-filter-container">
                                    <select id="country-filter" class="form-select form-select-sm" data-placeholder="Lọc theo QG"></select>
                                </div>
                                <div class="col-4" id="year-filter-container">
                                    <select id="year-filter" class="form-select form-select-sm" data-placeholder="Lọc theo Năm"></select>
                                </div>
                            </div>
                            <label class="form-label">Sắp xếp</label>
                            <div class="row">
                                <div class="col-4" id="sort-container">
                                    <select id="sort_field" class="form-select form-select-sm">
                                        <option value="">Sắp xếp</option>
                                        <option value="modified.time">Thời gian sửa</option>
                                        <option value="year">Năm</option>
                                        <option value="_id">ID</option>
                                    </select>
                                </div>
                                <div class="col-4">
                                    <select id="sort_type" class="form-select form-select-sm">
                                        <option value="">Thứ tự</option>
                                        <option value="desc">Giảm dần</option>
                                        <option value="asc">Tăng dần</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <h5><i class="bi bi-sliders"></i> Tùy chọn Nâng cao & Mạng</h5>
                        <hr class="mt-1">
                         <div class="row g-3">
                            <div class="col-sm-6">
                                <label for="maxPages" class="form-label">Giới hạn trang quét (0=all)</label>
                                <input type="number" class="form-control form-control-sm" id="maxPages" value="0">
                            </div>
                            <div class="col-sm-6">
                                <label for="limit" class="form-label">Số phim trên mỗi trang</label>
                                <input type="number" class="form-control form-control-sm" id="limit" value="24">
                            </div>
                            <div class="col-sm-6">
                                <label for="concurrency" class="form-label">Số phim xử lý đồng thời</label>
                                <input type="number" class="form-control form-control-sm" id="concurrency" value="3">
                            </div>
                            <div class="col-sm-6">
                                <label for="post_status" class="form-label">Trạng thái sau khi đồng bộ</label>
                                <select id="post_status" class="form-select form-select-sm">
                                    <option value="">Không đổi</option>
                                    <option value="Publish">Publish</option>
                                    <option value="Draft">Draft</option>
                                </select>
                            </div>
                             <div class="col-sm-6">
                                 <label for="delayPages" class="form-label">Delay giữa các trang (ms)</label>
                                 <input type="number" class="form-control form-control-sm" id="delayPages" value="300">
                            </div>
                            <div class="col-sm-6">
                                <label for="delayBatches" class="form-label">Delay giữa các lô (ms)</label>
                                <input type="number" class="form-control form-control-sm" id="delayBatches" value="1000">
                            </div>
                             <div class="col-12">
                                <label for="proxies" class="form-label">Danh sách Proxy (mỗi proxy một dòng)</label>
                                <textarea class="form-control form-control-sm" id="proxies" rows="2" placeholder="http://user:pass@host:port"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-12">
        <div class="card shadow-sm">
            <div class="card-header">
                <h5 class="mb-0"><i class="bi bi-link-45deg me-2"></i>Đồng bộ theo danh sách Link API</h5>
            </div>
            <div class="card-body">
                <textarea class="form-control form-control-sm" id="movie-links-textarea" rows="8" placeholder="Mỗi link một dòng... ví dụ: https://ophim1.com/v1/api/phim/ten-phim"></textarea>
                <small class="form-text text-muted">Nếu có dữ liệu ở đây, hệ thống sẽ ưu tiên đồng bộ theo danh sách này và bỏ qua các cài đặt ở trên.</small>
            </div>
        </div>
    </div>

    <div class="col-lg-8 col-xl-9">
        <div class="card shadow-sm mb-4">
            <div class="card-header"><h5 class="mb-0">Tiến trình</h5></div>
            <div class="card-body">
                <div class="progress" role="progressbar" style="height: 25px;">
                    <div id="progress-bar" class="progress-bar" style="width: 0%">0%</div>
                </div>
                <div class="row text-center mt-3">
                    <div class="col"><div class="fs-4 fw-bold" id="stat-found">0</div><div class="text-secondary small">Mục tiêu</div></div>
                    <div class="col text-success"><div class="fs-4 fw-bold" id="stat-success">0</div><div class="text-secondary small">Thành công</div></div>
                    <div class="col text-danger"><div class="fs-4 fw-bold" id="stat-errors">0</div><div class="text-secondary small">Lỗi</div></div>
                </div>
            </div>
        </div>
        <div class="card shadow-sm">
            <div class="card-header"><h5 class="mb-0">Kết quả (Lần chạy gần nhất)</h5></div>
            <div class="card-body p-0">
                <div class="table-responsive" style="max-height: 450px; overflow-y: auto;">
                    <table class="table table-hover table-sm align-middle mb-0">
                        <thead>
                            <tr>
                                <th>Ảnh</th>
                                <th>Tên phim</th>
                                <th>Năm</th>
                                <th>Trạng thái Phim</th>
                                <th>Thể loại</th>
                                <th>Quốc gia</th>
                                <th>Trạng thái Sync</th>
                            </tr>
                        </thead>
                        <tbody id="results-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4 col-xl-3">
        <div class="card shadow-sm h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Log chi tiết</h5>
                <button class="btn btn-sm btn-outline-danger" id="clear-log-btn"><i class="bi bi-trash"></i> Xóa Log</button>
            </div>
            <div id="log-container" class="card-body" style="max-height: 565px; overflow-y: auto; font-size: 0.8rem; line-height: 1.5;"></div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const syncToolConfig = {
        socketEventPrefix: 'sync',
        localStorageKey: 'syncSettings',
        elements: {
            loadingOverlay: document.getElementById('loading-overlay'),
            startButton: document.getElementById('syncButton'),
            buttonText: document.getElementById('button-text'),
            pauseButton: document.getElementById('pauseButton'),
            stopButton: document.getElementById('stopButton'),
            logContainer: document.getElementById('log-container'),
            resultsBody: document.getElementById('results-body'),
            progressBar: document.getElementById('progress-bar'),
            statFound: document.getElementById('stat-found'),
            statSuccess: document.getElementById('stat-success'),
            statErrors: document.getElementById('stat-errors'),
            inputs: document.querySelectorAll('#settings-form input, #settings-form select, #settings-form textarea, #movie-links-textarea'),
            sourceFilters: document.getElementById('source-filters'),
            movieLinksTextarea: document.getElementById('movie-links-textarea'),
            proxies: document.getElementById('proxies'),
            syncType: document.getElementById('sync-type'),
            syncValueSelect: document.getElementById('sync-value'),
            syncKeywordInput: document.getElementById('sync-keyword'),
            categoryFilter: document.getElementById('category-filter'),
            countryFilter: document.getElementById('country-filter'),
            yearFilter: document.getElementById('year-filter'),
            sortField: document.getElementById('sort_field'),
            sortType: document.getElementById('sort_type'),
            clearLogButton: document.getElementById('clear-log-btn'),
        },
        getSettings: () => {
            const selectedOption = syncToolConfig.elements.syncValueSelect.options[syncToolConfig.elements.syncValueSelect.selectedIndex];
            return {
                maxPages: parseInt(document.getElementById('maxPages').value, 10) || 0,
                limit: parseInt(document.getElementById('limit').value, 10) || 24,
                delayPages: parseInt(document.getElementById('delayPages').value, 10) || 300,
                delayBatches: parseInt(document.getElementById('delayBatches').value, 10) || 1000,
                concurrency: parseInt(document.getElementById('concurrency').value, 10) || 3,
                sync_type: syncToolConfig.elements.syncType.value,
                sync_value: syncToolConfig.elements.syncType.value === 'tim-kiem' ?
                    syncToolConfig.elements.syncKeywordInput.value : syncToolConfig.elements.syncValueSelect.value,
                sync_value_text: syncToolConfig.elements.syncType.value === 'tim-kiem' ?
                    syncToolConfig.elements.syncKeywordInput.value : (selectedOption ? selectedOption.text : ''),
                category: syncToolConfig.elements.categoryFilter.value,
                country: syncToolConfig.elements.countryFilter.value,
                year: syncToolConfig.elements.yearFilter.value,
                sort_field: syncToolConfig.elements.sortField.value,
                sort_type: syncToolConfig.elements.sortType.value,
                post_status: document.getElementById('post_status').value,
                movie_links: syncToolConfig.elements.movieLinksTextarea.value,
                proxies: syncToolConfig.elements.proxies.value.split('\n').map(p => p.trim()).filter(Boolean)
            };
        },
        loadSettings: (saved) => {
            document.getElementById('maxPages').value = saved.hasOwnProperty('maxPages') ? saved.maxPages : 0;
            document.getElementById('limit').value = saved.hasOwnProperty('limit') ? saved.limit : 24;
            document.getElementById('delayPages').value = saved.hasOwnProperty('delayPages') ? saved.delayPages : 300;
            document.getElementById('delayBatches').value = saved.hasOwnProperty('delayBatches') ? saved.delayBatches : 1000;
            document.getElementById('concurrency').value = saved.hasOwnProperty('concurrency') ? saved.concurrency : 3;
            syncToolConfig.elements.syncType.value = saved.sync_type || 'danh-muc';
            document.getElementById('post_status').value = saved.post_status || '';
            syncToolConfig.elements.movieLinksTextarea.value = saved.movie_links || '';
            syncToolConfig.elements.proxies.value = (saved.proxies || []).join('\n');
        },
        validateOptions: (options) => {
            if (options.movie_links.trim() === '' && !options.sync_value) {
                Swal.fire('Thiếu thông tin!', 'Vui lòng chọn nguồn đồng bộ hoặc điền danh sách link phim.', 'warning');
                return false;
            }
            return true;
        },
        renderResultRow: (movie, processedItems) => {
            processedItems[movie._id] = movie;
            const newRow = syncToolConfig.elements.resultsBody.insertRow(0);
            const syncStatusClass = movie.status === 'created' ? 'text-bg-success' : 'text-bg-warning';
            const movieStatusClass = movie.movie_status === 'completed' ? 'text-bg-info' : 'text-bg-primary';
            newRow.innerHTML = `
                <td><img src="${movie.thumb}" alt="thumb" style="width: 40px; height: 60px; object-fit: cover; border-radius: 4px;"></td>
                <td>${movie.name}</td>
                <td><span class="badge text-bg-secondary">${movie.year || ''}</span></td>
                <td><span class="badge ${movieStatusClass}">${movie.movie_status}</span></td>
                <td><small>${movie.categories || ''}</small></td>
                <td><small>${movie.countries || ''}</small></td>
                <td><span class="badge ${syncStatusClass}">${movie.status}</span></td>
            `;
        },
        onStateChange: (state) => {
            const isRunning = state.status === 'running' || state.status === 'paused';
            syncToolConfig.elements.inputs.forEach(input => {
                input.disabled = isRunning;
            });
            if (!isRunning) {
                // Chỉ bật lại bộ lọc nguồn nếu textarea link trống
                const hasLinks = syncToolConfig.elements.movieLinksTextarea.value.trim() !== '';
                const sourceFiltersDisabled = hasLinks;
                syncToolConfig.elements.sourceFilters.querySelectorAll('input, select').forEach(el => {
                    el.disabled = sourceFiltersDisabled;
                });
                // Cập nhật giao diện người dùng để phản ánh trạng thái bị vô hiệu hóa
                syncToolConfig.elements.sourceFilters.style.opacity = sourceFiltersDisabled ? 0.5 : 1;
                syncToolConfig.elements.sourceFilters.style.pointerEvents = sourceFiltersDisabled ? 'none' : 'auto';
            }
        },
        customSocketEvents: (socket, ui) => {
             socket.on('movie-synced', ui.addResultRow);
             socket.on('sync:movies-found', (links) => {
                const currentLinks = syncToolConfig.elements.movieLinksTextarea.value;
                const newLinks = links.join('\n');
                syncToolConfig.elements.movieLinksTextarea.value = (currentLinks ? currentLinks + '\n' : '') + newLinks;
                syncToolConfig.elements.movieLinksTextarea.dispatchEvent(new Event('change'));
             });
        },
        initialize: () => {
            const SOURCE_CATEGORIES = [
                { value: 'phim-moi', text: 'Phim Mới' }, { value: 'phim-bo', text: 'Phim Bộ' },
                { value: 'phim-le', text: 'Phim Lẻ' }, { value: 'tv-shows', text: 'TV Shows' },
                { value: 'phim-bo-dang-chieu', text: 'Phim Bộ Đang Chiếu' },
                { value: 'phim-bo-hoan-thanh', text: 'Phim Bộ Hoàn Thành' },
                { value: 'phim-sap-chieu', text: 'Phim Sắp Chiếu' }
            ];
            async function populateSelect(selectElement, url, valueKey, nameKey, isSourceData = false, addAllOption = true) {
                try {
                    const response = await fetch(url);
                    const data = await response.json();
                    const options = addAllOption ? [{ value: '', text: selectElement.dataset.placeholder || 'Tất cả' }] : [];
                    data.data.items.forEach(item => {
                        options.push({ value: item[valueKey], text: item[nameKey] });
                    });
                     selectElement.innerHTML = options.map(opt => `<option value="${opt.value}">${opt.text}</option>`).join('');
                } catch (error) {
                    selectElement.innerHTML = '<option value="">Lỗi khi tải</option>';
                }
            }

            function updateSyncValueOptions() {
                const type = syncToolConfig.elements.syncType.value;
                const { syncValueSelect, syncKeywordInput, sortContainer, categoryFilterContainer, countryFilterContainer, yearFilterContainer } = syncToolConfig.elements;
                
                const isSearch = type === 'tim-kiem';
                syncValueSelect.classList.toggle('d-none', isSearch);
                syncKeywordInput.classList.toggle('d-none', !isSearch);
                
                if (document.getElementById('sort-container')) {
                    document.getElementById('sort-container').style.display = isSearch ? 'none' : 'block';
                }
                if (categoryFilterContainer) categoryFilterContainer.style.display = (isSearch || type === 'the-loai') ? 'none' : 'block';
                if (countryFilterContainer) countryFilterContainer.style.display = (isSearch || type === 'quoc-gia') ? 'none' : 'block';
                if (yearFilterContainer) yearFilterContainer.style.display = (isSearch || type === 'nam-phat-hanh') ? 'none' : 'block';

                switch(type) {
                    case 'danh-muc':
                        syncValueSelect.innerHTML = SOURCE_CATEGORIES.map(cat => `<option value="${cat.value}">${cat.text}</option>`).join('');
                        break;
                    case 'the-loai':
                        populateSelect(syncValueSelect, '/api/the-loai', 'slug', 'name', true, false);
                        break;
                    case 'quoc-gia':
                        populateSelect(syncValueSelect, '/api/quoc-gia', 'slug', 'name', true, false);
                        break;
                    case 'nam-phat-hanh':
                        populateSelect(syncValueSelect, '/api/nam-phat-hanh', 'year', 'year', true, false);
                        break;
                }
            }
            
            const toggleFilters = () => {
                const isRunning = syncToolConfig.elements.startButton.disabled;
                if (isRunning) return;

                const hasLinks = syncToolConfig.elements.movieLinksTextarea.value.trim() !== '';
                const isDisabled = hasLinks;
                
                syncToolConfig.elements.sourceFilters.querySelectorAll('input, select').forEach(el => {
                    el.disabled = isDisabled;
                });
                syncToolConfig.elements.sourceFilters.style.opacity = isDisabled ? 0.5 : 1;
                syncToolConfig.elements.sourceFilters.style.pointerEvents = isDisabled ? 'none' : 'auto';
            };

            syncToolConfig.elements.movieLinksTextarea.addEventListener('input', toggleFilters);
            syncToolConfig.elements.movieLinksTextarea.addEventListener('change', toggleFilters);

            Promise.all([
                populateSelect(syncToolConfig.elements.categoryFilter, '/api/the-loai', 'slug', 'name'),
                populateSelect(syncToolConfig.elements.countryFilter, '/api/quoc-gia', 'slug', 'name'),
                populateSelect(syncToolConfig.elements.yearFilter, '/api/nam-phat-hanh', 'year', 'year')
            ]).then(() => {
    
                updateSyncValueOptions();
                syncToolConfig.elements.syncType.addEventListener('change', updateSyncValueOptions);
                toggleFilters();
            });
        }
    };

    createToolInterface(syncToolConfig);
});
</script>