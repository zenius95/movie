<div class="row g-4">
    <div class="col-lg-4 col-xl-3">
        <div class="card shadow-sm h-100">
            <div class="card-header d-flex align-items-center">
                <i class="bi bi-gear-fill me-2"></i>
                <h5 class="mb-0">Bảng điều khiển</h5>
            </div>
            <div class="card-body d-flex flex-column">
                <div id="settings-form">
                    <h6>Tùy chọn</h6>
                    <div class="row g-2 mb-3">
                        <div class="col"><label for="maxPages" class="form-label">Giới hạn trang (0=all)</label><input type="number" class="form-control form-control-sm" id="maxPages" value="0"></div>
                        <div class="col"><label for="concurrency" class="form-label">Đồng thời</label><input type="number" class="form-control form-control-sm" id="concurrency" value="3"></div>
                    </div>
                    <div class="row g-2 mb-3">
                        <div class="col"><label for="delayPages" class="form-label">Delay Trang</label><input type="number" class="form-control form-control-sm" id="delayPages" value="300"></div>
                        <div class="col"><label for="delayBatches" class="form-label">Delay Lô</label><input type="number" class="form-control form-control-sm" id="delayBatches" value="1000"></div>
                    </div>
                    <h6>Nguồn Đồng bộ</h6>
                    <div class="input-group mb-3">
                        <select class="form-select form-select-sm" id="sync-type" style="flex-grow: 0; width: auto;">
                            <option value="danh-muc" selected>Danh mục</option>
                            <option value="the-loai">Thể loại</option>
                            <option value="quoc-gia">Quốc gia</option>
                            <option value="nam-phat-hanh">Năm</option>
                            <option value="tim-kiem">Từ khóa</option>
                        </select>
                        <select class="form-select form-select-sm" id="sync-value"></select>
                        <input type="text" class="form-control form-control-sm d-none" id="sync-keyword" placeholder="Nhập từ khóa...">
                    </div>
                    <h6>Lọc & Sắp xếp</h6>
                    <div class="row g-2 mb-3">
                        <div class="col-12" id="category-filter-container">
                            <label for="category-filter" class="form-label">Lọc theo Thể loại</label>
                            <select id="category-filter" class="form-select form-select-sm"></select>
                        </div>
                        <div class="col-6" id="country-filter-container">
                            <label for="country-filter" class="form-label">Lọc theo Quốc gia</label>
                            <select id="country-filter" class="form-select form-select-sm"></select>
                        </div>
                        <div class="col-6" id="year-filter-container">
                            <label for="year-filter" class="form-label">Lọc theo Năm</label>
                            <select id="year-filter" class="form-select form-select-sm"></select>
                        </div>
                    </div>
                    <div class="row g-2 mb-3" id="sort-container">
                        <div class="col">
                            <label for="sort_field" class="form-label">Sắp xếp theo</label>
                            <select id="sort_field" class="form-select form-select-sm">
                                <option value="">Mặc định</option>
                                <option value="modified.time">Thời gian sửa</option>
                                <option value="year">Năm</option>
                                <option value="_id">ID</option>
                            </select>
                        </div>
                        <div class="col">
                            <label for="sort_type" class="form-label">Thứ tự</label>
                            <select id="sort_type" class="form-select form-select-sm">
                                <option value="">Mặc định</option>
                                <option value="desc">Giảm dần</option>
                                <option value="asc">Tăng dần</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="mt-auto">
                    <div class="d-grid gap-2">
                        <button id="syncButton" class="btn btn-primary btn-lg"><i class="bi bi-arrow-repeat me-2"></i><span id="button-text">Bắt đầu</span></button>
                        <div class="btn-group">
                            <button id="pauseButton" class="btn btn-warning w-50" disabled><i class="bi bi-pause-fill me-1"></i>Tạm dừng</button>
                            <button id="stopButton" class="btn btn-danger w-50" disabled><i class="bi bi-stop-circle-fill me-1"></i>Dừng</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-8 col-xl-9">
        <div class="card shadow-sm mb-4">
            <div class="card-header"><h5 class="mb-0">Tiến trình</h5></div>
            <div class="card-body">
                <div class="progress" role="progressbar" style="height: 25px;">
                    <div id="progress-bar" class="progress-bar" style="width: 0%">0%</div>
                </div>
                <div class="row text-center mt-3">
                    <div class="col"><div class="fs-4 fw-bold" id="stat-found">0</div><div class="text-secondary small">Mục tiêu</div></div>
                    <div class="col text-success"><div class="fs-4 fw-bold" id="stat-success">0</div><div class="text-secondary small">Thành công</div></div>
                    <div class="col text-danger"><div class="fs-4 fw-bold" id="stat-errors">0</div><div class="text-secondary small">Lỗi</div></div>
                </div>
            </div>
        </div>
        <div class="card shadow-sm">
            <div class="card-header"><h5 class="mb-0">Kết quả (Lần chạy gần nhất)</h5></div>
            <div class="card-body p-0">
                <div class="table-responsive" style="max-height: 450px; overflow-y: auto;">
                    <table class="table table-hover table-sm align-middle mb-0">
                        <thead>
                            <tr>
                                <th>Ảnh</th>
                                <th>Tên phim</th>
                                <th>Năm</th>
                                <th>Trạng thái Phim</th>
                                <th>Thể loại</th>
                                <th>Quốc gia</th>
                                <th>Trạng thái Sync</th>
                            </tr>
                        </thead>
                        <tbody id="results-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="card shadow-sm mt-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Log chi tiết</h5>
                <button class="btn btn-sm btn-outline-danger" id="clear-log-btn"><i class="bi bi-trash"></i> Xóa Log</button>
            </div>
            <div id="log-container" class="card-body" style="max-height: 250px; overflow-y: auto; font-size: 0.8rem; line-height: 1.5;"></div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const syncToolConfig = {
        socketEventPrefix: 'sync',
        localStorageKey: 'syncSettings',
        elements: {
            loadingOverlay: document.getElementById('loading-overlay'),
            startButton: document.getElementById('syncButton'),
            buttonText: document.getElementById('button-text'),
            pauseButton: document.getElementById('pauseButton'),
            stopButton: document.getElementById('stopButton'),
            logContainer: document.getElementById('log-container'),
            resultsBody: document.getElementById('results-body'),
            progressBar: document.getElementById('progress-bar'),
            statFound: document.getElementById('stat-found'),
            statSuccess: document.getElementById('stat-success'),
            statErrors: document.getElementById('stat-errors'),
            inputs: document.querySelectorAll('#settings-form input, #settings-form select'),
            syncType: document.getElementById('sync-type'),
            syncValueSelect: document.getElementById('sync-value'),
            syncKeywordInput: document.getElementById('sync-keyword'),
            categoryFilter: document.getElementById('category-filter'),
            countryFilter: document.getElementById('country-filter'),
            yearFilter: document.getElementById('year-filter'),
            sortField: document.getElementById('sort_field'),
            sortType: document.getElementById('sort_type'),
            sortContainer: document.getElementById('sort-container'),
            categoryFilterContainer: document.getElementById('category-filter-container'),
            countryFilterContainer: document.getElementById('country-filter-container'),
            yearFilterContainer: document.getElementById('year-filter-container'),
            clearLogButton: document.getElementById('clear-log-btn'),
        },
        getSettings: () => {
            const selectedOption = syncToolConfig.elements.syncValueSelect.options[syncToolConfig.elements.syncValueSelect.selectedIndex];
            return {
                maxPages: parseInt(document.getElementById('maxPages').value, 10) || 0,
                delayPages: parseInt(document.getElementById('delayPages').value, 10) || 300,
                delayBatches: parseInt(document.getElementById('delayBatches').value, 10) || 1000,
                concurrency: parseInt(document.getElementById('concurrency').value, 10) || 3,
                sync_type: syncToolConfig.elements.syncType.value,
                sync_value: syncToolConfig.elements.syncType.value === 'tim-kiem' ? syncToolConfig.elements.syncKeywordInput.value : syncToolConfig.elements.syncValueSelect.value,
                sync_value_text: syncToolConfig.elements.syncType.value === 'tim-kiem' ? syncToolConfig.elements.syncKeywordInput.value : (selectedOption ? selectedOption.text : ''),
                category: syncToolConfig.elements.categoryFilter.value,
                country: syncToolConfig.elements.countryFilter.value,
                year: syncToolConfig.elements.yearFilter.value,
                sort_field: syncToolConfig.elements.sortField.value,
                sort_type: syncToolConfig.elements.sortType.value,
            };
        },
        loadSettings: (saved) => {
            document.getElementById('maxPages').value = saved.hasOwnProperty('maxPages') ? saved.maxPages : 0;
            document.getElementById('delayPages').value = saved.hasOwnProperty('delayPages') ? saved.delayPages : 300;
            document.getElementById('delayBatches').value = saved.hasOwnProperty('delayBatches') ? saved.delayBatches : 1000;
            document.getElementById('concurrency').value = saved.hasOwnProperty('concurrency') ? saved.concurrency : 3;
            syncToolConfig.elements.syncType.value = saved.sync_type || 'danh-muc';
        },
        validateOptions: (options) => {
            if (!options.sync_value) {
                alert('Vui lòng chọn hoặc nhập giá trị cho nguồn đồng bộ.');
                return false;
            }
            return true;
        },
        renderResultRow: (movie, processedItems) => {
            processedItems[movie._id] = movie;
            const newRow = syncToolConfig.elements.resultsBody.insertRow(0);
            const syncStatusClass = movie.status === 'created' ? 'text-bg-success' : 'text-bg-warning';
            const movieStatusClass = movie.movie_status === 'completed' ? 'text-bg-info' : 'text-bg-primary';

            newRow.innerHTML = `
                <td><img src="${movie.thumb}" alt="thumb" style="width: 40px; height: 60px; object-fit: cover; border-radius: 4px;"></td>
                <td>${movie.name}</td>
                <td><span class="badge text-bg-secondary">${movie.year || ''}</span></td>
                <td><span class="badge ${movieStatusClass}">${movie.movie_status}</span></td>
                <td><small>${movie.categories || ''}</small></td>
                <td><small>${movie.countries || ''}</small></td>
                <td><span class="badge ${syncStatusClass}">${movie.status}</span></td>
            `;
        },
        customSocketEvents: (socket, ui) => {
             socket.on('movie-synced', ui.addResultRow);
        },
        initialize: () => {
            const SOURCE_CATEGORIES = [
                { value: 'phim-moi', text: 'Phim Mới' }, { value: 'phim-bo', text: 'Phim Bộ' },
                { value: 'phim-le', text: 'Phim Lẻ' }, { value: 'tv-shows', text: 'TV Shows' },
                { value: 'phim-bo-dang-chieu', text: 'Phim Bộ Đang Chiếu' },
                { value: 'phim-bo-hoan-thanh', text: 'Phim Bộ Hoàn Thành' },
                { value: 'phim-sap-chieu', text: 'Phim Sắp Chiếu' }
            ];

            async function populateSelect(selectElement, url, valueKey, nameKey, isSourceData = false, addAllOption = true) {
                try {
                    const response = await fetch(url);
                    const data = await response.json();
                    selectElement.innerHTML = addAllOption ? '<option value="">Tất cả</option>' : '';
                    data.data.items.forEach(item => {
                        selectElement.innerHTML += `<option value="${item[valueKey]}">${item[nameKey]}</option>`;
                    });
                } catch (error) {
                    selectElement.innerHTML = '<option value="">Lỗi khi tải</option>';
                }
            }

            function updateSyncValueOptions() {
                const type = syncToolConfig.elements.syncType.value;
                const { syncValueSelect, syncKeywordInput, sortContainer, categoryFilterContainer, countryFilterContainer, yearFilterContainer } = syncToolConfig.elements;
                
                syncValueSelect.classList.toggle('d-none', type === 'tim-kiem');
                syncKeywordInput.classList.toggle('d-none', type !== 'tim-kiem');
                sortContainer.style.display = type === 'tim-kiem' ? 'none' : 'flex';
                categoryFilterContainer.style.display = (type === 'tim-kiem' || type === 'the-loai') ? 'none' : 'block';
                countryFilterContainer.style.display = (type === 'tim-kiem' || type === 'quoc-gia') ? 'none' : 'block';
                yearFilterContainer.style.display = (type === 'tim-kiem' || type === 'nam-phat-hanh') ? 'none' : 'block';

                switch(type) {
                    case 'danh-muc':
                        syncValueSelect.innerHTML = SOURCE_CATEGORIES.map(cat => `<option value="${cat.value}">${cat.text}</option>`).join('');
                        break;
                    case 'the-loai':
                        populateSelect(syncValueSelect, '/api/the-loai', 'slug', 'name', true, false);
                        break;
                    case 'quoc-gia':
                        populateSelect(syncValueSelect, '/api/quoc-gia', 'slug', 'name', true, false);
                        break;
                    case 'nam-phat-hanh':
                        populateSelect(syncValueSelect, '/api/nam-phat-hanh', 'year', 'year', true, false);
                        break;
                }
            }

            Promise.all([
                populateSelect(syncToolConfig.elements.categoryFilter, '/api/the-loai', 'slug', 'name'),
                populateSelect(syncToolConfig.elements.countryFilter, '/api/quoc-gia', 'slug', 'name'),
                populateSelect(syncToolConfig.elements.yearFilter, '/api/nam-phat-hanh', 'year', 'year')
            ]).then(() => {
                updateSyncValueOptions();
                syncToolConfig.elements.syncType.addEventListener('change', updateSyncValueOptions);
            });
        }
    };

    createToolInterface(syncToolConfig);
});
</script>