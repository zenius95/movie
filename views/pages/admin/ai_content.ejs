<style>
    /* CSS cho hiệu ứng loading */
    #loading-overlay {
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background-color: rgba(0, 0, 0, 0.7); z-index: 9999;
        display: flex; justify-content: center; align-items: center;
        flex-direction: column; color: white;
    }
    .spinner-border { width: 3rem; height: 3rem; }
    /* Tùy chỉnh z-index cho modal của Summernote */
    .note-editor.note-frame .note-modal { z-index: 1060; }
    /* Thêm CSS cho màu sắc log */
    #log-container .log-info { color: #0dcaf0; }
    #log-container .log-success { color: #198754; }
    #log-container .log-warning { color: #ffc107; }
    #log-container .log-error { color: #dc3545; }
</style>

<div id="loading-overlay">
    <div class="spinner-border text-light" role="status"><span class="visually-hidden">Loading...</span></div>
    <p class="mt-3">Đang kiểm tra trạng thái...</p>
</div>

<div class="row g-4">
    <div class="col-12">
        <div class="card shadow-sm">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="bi bi-robot me-2"></i>Bảng điều khiển & Cài đặt AI</h5>
                 <div class="d-flex gap-2">
                    <button id="startButton" class="btn btn-primary"><i class="bi bi-play-circle-fill me-2"></i><span id="button-text">Bắt đầu</span></button>
                    <button id="pauseButton" class="btn btn-warning" disabled><i class="bi bi-pause-fill me-1"></i>Tạm dừng</button>
                    <button id="stopButton" class="btn btn-danger" disabled><i class="bi bi-stop-circle-fill me-1"></i>Dừng</button>
                </div>
            </div>
            <div class="card-body">
                <div id="settings-form" class="row g-3">
                    <div class="col-md-6">
                        <h5><i class="bi bi-gear-wide-connected"></i> Cài đặt & Mạng</h5>
                        <hr class="mt-1">
                        <div class="row g-3">
                            <div class="col-sm-6">
                                <label for="ai-target" class="form-label">Mục tiêu</label>
                                <select class="form-select form-select-sm" id="ai-target">
                                    <option value="all" selected>Tất cả phim</option>
                                    <option value="empty">Chỉ phim chưa có nội dung AI</option>
                                    <option value="random_10">10 phim ngẫu nhiên</option>
                                </select>
                            </div>
                            <div class="col-sm-6">
                                <label for="ai-model" class="form-label">Chọn model</label>
                                <select class="form-select form-select-sm" id="ai-model">
                                    <option value="gpt-4o">GPT-4o (Mới nhất)</option>
                                    <option value="gpt-4-turbo">GPT-4 Turbo</option>
                                    <option value="gpt-3.5-turbo-1106" selected>GPT-3.5 Turbo (Nhanh & Rẻ)</option>
                                </select>
                            </div>
                            <div class="col-sm-4">
                                <label for="concurrency" class="form-label">Chạy đồng thời</label>
                                <input type="number" class="form-control form-control-sm" id="concurrency" value="3">
                            </div>
                            <div class="col-sm-4">
                                <label for="delay" class="form-label">Delay mỗi lô (ms)</label>
                                <input type="number" class="form-control form-control-sm" id="delay" value="1000">
                            </div>
                            <div class="col-sm-4">
                                <label for="post_status" class="form-label">Trạng thái sau khi tạo</label>
                                <select id="post_status" class="form-select form-select-sm">
                                    <option value="">Không đổi</option>
                                    <option value="Publish">Publish</option>
                                    <option value="Draft">Draft</option>
                                </select>
                            </div>
                            <div class="col-12">
                                <label for="api-key" class="form-label">OpenAI API Key(s)</label>
                                <textarea class="form-control form-control-sm" id="api-key" rows="3" placeholder="Nhập mỗi key một dòng..."></textarea>
                                <small class="form-text text-muted">Nếu bỏ trống, hệ thống sẽ dùng key từ file `.env`.</small>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                         <h5><i class="bi bi-file-text"></i> Cài đặt Prompt</h5>
                         <hr class="mt-1">
                         <div class="mb-3">
                            <label for="ai-system-prompt" class="form-label">System Prompt</label>
                            <textarea class="form-control form-control-sm" id="ai-system-prompt" rows="5">Bạn là một trợ lý AI chuyên tạo ra nội dung HTML và đóng gói nó trong một cấu trúc JSON.
Mọi phản hồi của bạn BẮT BUỘC phải là một đối tượng JSON hợp lệ và không chứa bất kỳ ký tự nào khác bên ngoài nó.
Đối tượng JSON phải tuân thủ nghiêm ngặt cấu trúc sau: {"content": "chuỗi_html_cua_ban"}.
Giá trị của khóa "content" phải là một chuỗi (string) duy nhất chứa mã HTML.</textarea>
                        </div>
                        <div class="mb-3">
                            <label for="ai-user-prompt" class="form-label">User Prompt</label>
                            <textarea class="form-control form-control-sm" id="ai-user-prompt" rows="5">Dựa vào thông tin ban đầu về phim "{name}", hãy viết một bài đánh giá chi tiết bằng HTML...</textarea>
                            <small class="form-text text-muted">Các biến: `{name}`, `{origin_name}`, `{slug}`, `{content}`, `{year}`...</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-12">
         <div class="card shadow-sm">
            <div class="card-header"><h5 class="mb-0">Tiến trình Tạo Nội Dung</h5></div>
            <div class="card-body">
                <div class="progress" role="progressbar" style="height: 25px;">
                    <div id="progress-bar" class="progress-bar" style="width: 0%">0%</div>
                </div>
                <div class="row text-center mt-3">
                    <div class="col"><div class="fs-4 fw-bold" id="stat-found">0</div><div class="text-secondary small">Mục tiêu</div></div>
                    <div class="col text-success"><div class="fs-4 fw-bold" id="stat-success">0</div><div class="text-secondary small">Thành công</div></div>
                    <div class="col text-danger"><div class="fs-4 fw-bold" id="stat-errors">0</div><div class="text-secondary small">Lỗi</div></div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-7">
        <div class="card shadow-sm">
            <div class="card-header"><h5 class="mb-0">Kết quả (Lần chạy gần nhất)</h5></div>
            <div class="card-body p-0">
                <div class="table-responsive" style="max-height: 450px; overflow-y: auto;">
                    <table class="table table-hover table-sm align-middle mb-0">
                        <thead>
                            <tr>
                                <th style="width: 25%;">Tên phim</th>
                                <th style="width: 60%;">Nội dung AI (tóm tắt)</th>
                                <th class="text-end" style="width: 15%;">Hành động</th>
                            </tr>
                        </thead>
                        <tbody id="results-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-5">
        <div class="card shadow-sm h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Log chi tiết</h5>
                <button class="btn btn-sm btn-outline-danger" id="clear-log-btn"><i class="bi bi-trash"></i> Xóa Log</button>
            </div>
            <div id="log-container" class="card-body" style="max-height: 400px; overflow-y: auto; font-size: 0.8rem; line-height: 1.5;"></div>
        </div>
    </div>
</div>

<div class="modal fade" id="aiContentModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="aiContentModalLabel">Nội dung AI</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
             <textarea id="aiContentEditor"></textarea>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            <button type="button" class="btn btn-primary" id="saveAiContentBtn">Lưu thay đổi</button>
          </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const config = {
            socketEventPrefix: 'ai',
            localStorageKey: 'aiContentSettings',
            elements: {
                loadingOverlay: document.getElementById('loading-overlay'),
                startButton: document.getElementById('startButton'),
                buttonText: document.getElementById('button-text'),
                pauseButton: document.getElementById('pauseButton'),
                stopButton: document.getElementById('stopButton'),
                logContainer: document.getElementById('log-container'),
                resultsBody: document.getElementById('results-body'),
                progressBar: document.getElementById('progress-bar'),
                
                statFound: document.getElementById('stat-found'),
                statSuccess: document.getElementById('stat-success'),
                statErrors: document.getElementById('stat-errors'),
                inputs: document.querySelectorAll('#settings-form input, #settings-form select, #settings-form textarea'),
                aiTarget: document.getElementById('ai-target'),
                aiModel: document.getElementById('ai-model'),
                concurrency: document.getElementById('concurrency'),
                delay: document.getElementById('delay'),
                systemPrompt: document.getElementById('ai-system-prompt'),
                userPrompt: document.getElementById('ai-user-prompt'),
                apiKey: document.getElementById('api-key'),
                modal: {
                    instance: new bootstrap.Modal(document.getElementById('aiContentModal')),
                    label: document.getElementById('aiContentModalLabel'),
                    editor: document.getElementById('aiContentEditor'),
                    saveBtn: document.getElementById('saveAiContentBtn')
                },
                clearLogButton: document.getElementById('clear-log-btn'),
            },
            getSettings: () => ({
                target: config.elements.aiTarget.value,
                model: config.elements.aiModel.value,
                concurrency: parseInt(config.elements.concurrency.value, 10) || 3,
                delay: parseInt(config.elements.delay.value, 10) || 1000,
                apiKeys: config.elements.apiKey.value.split('\n').map(k => k.trim()).filter(Boolean),
                systemPrompt: config.elements.systemPrompt.value,
                userPrompt: config.elements.userPrompt.value,
                post_status: document.getElementById('post_status').value,
            }),
            loadSettings: (saved) => {
                config.elements.aiTarget.value = saved.target || 'all';
                config.elements.aiModel.value = saved.model || 'gpt-3.5-turbo-1106';
                config.elements.concurrency.value = saved.concurrency || 3;
                config.elements.delay.value = saved.delay || 1000;
                config.elements.apiKey.value = (saved.apiKeys || []).join('\n');
                if (saved.systemPrompt) config.elements.systemPrompt.value = saved.systemPrompt;
                if (saved.userPrompt) config.elements.userPrompt.value = saved.userPrompt;
                document.getElementById('post_status').value = saved.post_status || '';
            },
            validateOptions: (options) => {
                if (!options.systemPrompt.trim() || !options.userPrompt.trim()) {
                    Swal.fire('Thiếu thông tin!', 'Vui lòng nhập đầy đủ System Prompt và User Prompt.', 'warning');
                    return false;
                }
                return true;
            },
            renderResultRow: (movie, processedItems) => {
                processedItems[movie._id] = movie;
                const newRow = config.elements.resultsBody.insertRow(0);
                let summary = 'N/A';
                let rawContent = movie.ai_content || '';
                try {
                    const contentObj = JSON.parse(rawContent);
                    summary = contentObj.content || 'Không có mô tả.';
                } catch (e) {
                    summary = rawContent;
                }
                newRow.innerHTML = `
                    <td><strong>${movie.name}</strong></td>
                    <td><small>${summary.substring(0, 100).replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ')}...</small></td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-outline-info view-details-btn" data-movie-id="${movie._id}">
                            <i class="bi bi-eye-fill"></i> Xem & Sửa
                        </button>
                    </td>
                `;
            },
            handleResultClick: async (event, processedItems) => {
                const target = event.target.closest('.view-details-btn');
                if (target) {
                    const movieId = target.dataset.movieId;
                    const movie = processedItems[movieId];
                    if (movie) {
                        config.elements.modal.label.textContent = `Sửa nội dung AI cho: ${movie.name}`;
                        config.elements.modal.saveBtn.dataset.movieId = movieId;
                        
                        try {
                            const response = await fetch(`/admin/movies/get-ai-content/${movieId}`);
                            const data = await response.json();

                            if (!data.success) {
                                throw new Error(data.message || 'Không thể tải nội dung.');
                            }

                            let contentToEdit = '';
                            if (data.ai_content) {
                                try {
                                    const contentObj = JSON.parse(data.ai_content);
                                    contentToEdit = contentObj.content || data.ai_content;
                                } catch (e) {
                                    contentToEdit = data.ai_content;
                                }
                            }

                            $(config.elements.modal.editor).summernote('destroy');
                            $(config.elements.modal.editor).val(contentToEdit);
                            $(config.elements.modal.editor).summernote({
                                placeholder: 'Nhập nội dung AI...',
                                tabsize: 2,
                                height: 400,
                                toolbar: [
                                    ['style', ['style']],
                                    ['font', ['bold', 'underline', 'clear']],
                                    ['color', ['color']],
                                    ['para', ['ul', 'ol', 'paragraph']],
                                    ['table', ['table']],
                                    ['insert', ['link', 'picture', 'video']],
                                    ['view', ['fullscreen', 'codeview', 'help']]
                                ]
                            });
                            config.elements.modal.instance.show();
                        } catch (error) {
                            Swal.fire('Lỗi!', `Lỗi khi tải nội dung: ${error.message}`, 'error');
                        }
                    }
                }
            },
            customSocketEvents: (socket, ui, processedItems) => {
                 const logToUI = (data) => {
                    const logContainer = config.elements.logContainer;
                    const logEntry = document.createElement('div');
                    const typeClass = {
                        info: 'log-info',
                        success: 'log-success',
                        warning: 'log-warning',
                        error: 'log-error'
                    };
                    logEntry.className = typeClass[data.type] || 'text-muted';
                    logEntry.textContent = `[${data.timestamp}] ${data.message}`;
                    logContainer.appendChild(logEntry);
                    logContainer.scrollTop = logContainer.scrollHeight;
                };

                socket.off('ai-log'); // Gỡ listener cũ để tránh bị trùng lặp
                socket.on('ai-log', logToUI);
                socket.on('ai-movie-processed', ui.addResultRow);

                config.elements.modal.saveBtn.addEventListener('click', async (e) => {
                    const button = e.currentTarget;
                    const movieId = button.dataset.movieId;
                    if (!movieId) return;

                    const newContentHTML = $(config.elements.modal.editor).summernote('code');
                    const newContentJSON = JSON.stringify({ content: newContentHTML });

                    button.disabled = true;
                    button.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Đang lưu...';

                    try {
                        const response = await fetch(`/admin/movies/update-ai-content/${movieId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ ai_content: newContentJSON })
                        });
                        const result = await response.json();
                        if (result.success) {
                            processedItems[movieId].ai_content = newContentJSON;
                            Swal.fire('Thành công!', 'Lưu thay đổi thành công!', 'success');
                            config.elements.modal.instance.hide();
                        } else {
                            throw new Error(result.message || 'Lỗi không xác định.');
                        }
                    } catch (error) {
                        Swal.fire('Lỗi!', `Lưu thất bại: ${error.message}`, 'error');
                    } finally {
                        button.disabled = false;
                        button.innerHTML = 'Lưu thay đổi';
                    }
                });
            }
        };

        createToolInterface(config);
    });
</script>