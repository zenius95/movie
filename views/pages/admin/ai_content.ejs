<style>
    /* CSS cho hiệu ứng loading */
    #loading-overlay {
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background-color: rgba(0, 0, 0, 0.7); z-index: 9999;
        display: flex; justify-content: center; align-items: center;
        flex-direction: column; color: white;
    }
    .spinner-border { width: 3rem; height: 3rem; }
</style>

<div id="loading-overlay">
    <div class="spinner-border text-light" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-3">Đang kiểm tra trạng thái...</p>
</div>

<div class="row g-4">
    <div class="col-lg-4 col-xl-3">
        <div class="card shadow-sm h-100">
            <div class="card-header d-flex align-items-center">
                <i class="bi bi-robot me-2"></i>
                <h5 class="mb-0">Bảng điều khiển AI</h5>
            </div>
            <div class="card-body d-flex flex-column">
                <div id="settings-form">
                    <h6>Tùy chọn</h6>
                    <div class="row g-2 mb-3">
                        <div class="col"><label for="concurrency" class="form-label">Chạy đồng thời</label><input type="number" class="form-control form-control-sm" id="concurrency" value="3"></div>
                        <div class="col"><label for="delay" class="form-label">Delay mỗi lô (ms)</label><input type="number" class="form-control form-control-sm" id="delay" value="1000"></div>
                    </div>
                    <h6>Mục tiêu</h6>
                    <div class="input-group mb-3">
                        <select class="form-select form-select-sm" id="ai-target">
                            <option value="all" selected>Tất cả phim</option>
                            <option value="empty">Chỉ phim chưa có nội dung AI</option>
                        </select>
                    </div>
                    <h6>Prompt AI</h6>
                    <div class="mb-3">
                        <textarea class="form-control form-control-sm" id="ai-prompt" rows="5" 
                            placeholder="Viết prompt cho AI, dùng các biến như {name}, {year}, {content}, {slug}, {origin_name}...">Viết một đoạn mô tả hấp dẫn và sáng tạo cho bộ phim "{name}" ({origin_name}), phát hành năm {year}. Nội dung gốc của phim là: {content}. Đoạn mô tả nên dài khoảng 150-200 từ, độc đáo và thu hút người đọc.</textarea>
                        <small class="form-text text-muted">Có thể dùng các biến: `{name}`, `{origin_name}`, `{slug}`, `{content}`, `{type}`, `{status}`, `{time}`, `{episode_current}`, `{episode_total}`, `{quality}`, `{lang}`, `{year}`, `{view}`, `{chieurap}`, `{tmdb}`, `{imdb}`, `{images}`, `{modified_at}`</small>
                    </div>
                </div>
                <div class="mt-auto">
                    <div class="d-grid gap-2">
                        <button id="startButton" class="btn btn-primary btn-lg"><i class="bi bi-play-circle-fill me-2"></i><span id="button-text">Bắt đầu</span></button>
                        <div class="btn-group">
                            <button id="pauseButton" class="btn btn-warning w-50" disabled><i class="bi bi-pause-fill me-1"></i>Tạm dừng</button>
                            <button id="stopButton" class="btn btn-danger w-50" disabled><i class="bi bi-stop-circle-fill me-1"></i>Dừng</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-8 col-xl-9">
        <div class="card shadow-sm mb-4">
            <div class="card-header"><h5 class="mb-0">Tiến trình</h5></div>
            <div class="card-body">
                <div class="progress" role="progressbar" style="height: 25px;">
                    <div id="progress-bar" class="progress-bar" style="width: 0%">0%</div>
                </div>
                <div class="row text-center mt-3">
                    <div class="col"><div class="fs-4 fw-bold" id="stat-found">0</div><div class="text-secondary small">Mục tiêu</div></div>
                    <div class="col text-success"><div class="fs-4 fw-bold" id="stat-success">0</div><div class="text-secondary small">Thành công</div></div>
                    <div class="col text-danger"><div class="fs-4 fw-bold" id="stat-errors">0</div><div class="text-secondary small">Lỗi</div></div>
                </div>
            </div>
        </div>
        <div class="card shadow-sm">
            <div class="card-header"><h5 class="mb-0">Kết quả (Lần chạy gần nhất)</h5></div>
            <div class="card-body p-0">
                <div class="table-responsive" style="max-height: 450px; overflow-y: auto;">
                    <table class="table table-hover table-sm align-middle mb-0">
                        <thead>
                            <tr>
                                <th>Tên phim</th>
                                <th>Nội dung AI (tóm tắt)</th>
                                <th class="text-end">Hành động</th>
                            </tr>
                        </thead>
                        <tbody id="results-body"></tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="card shadow-sm mt-4">
            <div class="card-header"><h5 class="mb-0">Log chi tiết</h5></div>
            <div id="log-container" class="card-body" style="max-height: 250px; overflow-y: auto; font-size: 0.8rem; line-height: 1.5;"></div>
        </div>
    </div>
</div>

<div class="modal fade" id="aiContentModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="aiContentModalLabel">Nội dung AI</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body" id="aiContentModalBody">
        </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
      </div>
    </div>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const socket = io();
    let processedMovies = {}; // Lưu trữ kết quả để lấy nội dung đầy đủ

    const elements = {
        loadingOverlay: document.getElementById('loading-overlay'),
        startButton: document.getElementById('startButton'),
        buttonText: document.getElementById('button-text'),
        pauseButton: document.getElementById('pauseButton'),
        stopButton: document.getElementById('stopButton'),
        logContainer: document.getElementById('log-container'),
        resultsBody: document.getElementById('results-body'),
        progressBar: document.getElementById('progress-bar'),
        statFound: document.getElementById('stat-found'),
        statSuccess: document.getElementById('stat-success'),
        statErrors: document.getElementById('stat-errors'),
        inputs: document.querySelectorAll('#settings-form input, #settings-form select, #settings-form textarea'),
        aiTarget: document.getElementById('ai-target'),
        concurrency: document.getElementById('concurrency'),
        delay: document.getElementById('delay'),
        aiPrompt: document.getElementById('ai-prompt'),
        aiContentModal: new bootstrap.Modal(document.getElementById('aiContentModal')),
        aiContentModalLabel: document.getElementById('aiContentModalLabel'),
        aiContentModalBody: document.getElementById('aiContentModalBody'),
    };

    const ui = {
        renderState(state) {
            const isRunning = state.status === 'running' || state.status === 'paused';
            const isPaused = state.status === 'paused';

            elements.startButton.disabled = isRunning;
            elements.buttonText.textContent = isRunning ? 'Đang chạy...' : 'Bắt đầu';
            elements.pauseButton.disabled = !isRunning;
            elements.stopButton.disabled = !isRunning;
            elements.inputs.forEach(input => input.disabled = isRunning);
            elements.pauseButton.innerHTML = isPaused ? '<i class="bi bi-play-fill me-1"></i>Tiếp tục' : '<i class="bi bi-pause-fill me-1"></i>Tạm dừng';
            elements.pauseButton.classList.toggle('btn-warning', !isPaused);
            elements.pauseButton.classList.toggle('btn-info', isPaused);
            
            this.updateProgressBar(state.progress, state.status);
            elements.logContainer.innerHTML = '';
            state.logs.forEach(log => this.logToUI(log, false));
            elements.logContainer.scrollTop = elements.logContainer.scrollHeight;
            
            elements.resultsBody.innerHTML = '';
            processedMovies = {}; // Reset lại danh sách phim đã xử lý
            state.results.forEach(this.addResultRow);
            
            elements.loadingOverlay.style.display = 'none';
        },
        updateProgressBar(progress, status) {
            const total = progress.total || 0;
            const percentage = total === 0 ? 0 : Math.round((progress.processed / total) * 100);
            elements.progressBar.style.width = `${percentage}%`;
            elements.progressBar.textContent = `${percentage}%`;
            elements.statFound.textContent = total;
            elements.statSuccess.textContent = progress.success;
            elements.statErrors.textContent = progress.errors;

            elements.progressBar.classList.remove('progress-bar-animated', 'bg-success', 'bg-danger');
            if (status === 'running' || status === 'paused') {
                elements.progressBar.classList.add('progress-bar-striped', 'progress-bar-animated');
            } else if (status === 'stopped') {
                elements.progressBar.classList.add('bg-danger');
            } else if (status === 'idle' && progress.processed > 0 && progress.processed === total) {
                elements.progressBar.classList.add('bg-success');
            }
        },
        logToUI(data, shouldScroll = true) {
            const logContainer = elements.logContainer;
            const isAtBottom = logContainer.scrollTop + logContainer.clientHeight >= logContainer.scrollHeight - 20;
            const logEntry = document.createElement('div');
            const typeToClass = { 'info': 'text-info-emphasis', 'success': 'text-success', 'error': 'text-danger', 'warning': 'text-warning' };
            logEntry.className = typeToClass[data.type] || 'text-muted';
            logEntry.innerHTML = `[${data.timestamp}] ${data.message}`;
            logContainer.appendChild(logEntry);
            if (shouldScroll && isAtBottom) {
                logContainer.scrollTop = logContainer.scrollHeight;
            }
        },
        addResultRow(movie) {
            processedMovies[movie._id] = movie; // Lưu trữ toàn bộ thông tin phim
            const newRow = elements.resultsBody.insertRow(0);
            newRow.innerHTML = `
                <td><strong>${movie.name}</strong></td>
                <td><small>${movie.ai_content ? movie.ai_content.substring(0, 100) + '...' : 'N/A'}</small></td>
                <td class="text-end">
                    <button class="btn btn-sm btn-outline-info view-details-btn" data-movie-id="${movie._id}">
                        <i class="bi bi-eye-fill"></i> Xem chi tiết
                    </button>
                </td>
            `;
        }
    };

    // Lắng nghe sự kiện click trên toàn bộ bảng kết quả
    elements.resultsBody.addEventListener('click', (event) => {
        const target = event.target.closest('.view-details-btn');
        if (target) {
            const movieId = target.dataset.movieId;
            const movie = processedMovies[movieId];
            if (movie) {
                elements.aiContentModalLabel.textContent = `Nội dung AI cho: ${movie.name}`;
                elements.aiContentModalBody.innerHTML = movie.ai_content;
                elements.aiContentModal.show();
            }
        }
    });

    elements.startButton.addEventListener('click', () => {
        const options = {
            target: elements.aiTarget.value,
            concurrency: parseInt(elements.concurrency.value, 10) || 3,
            delay: parseInt(elements.delay.value, 10) || 1000,
            prompt: elements.aiPrompt.value,
        };
        if (!options.prompt.trim()) {
            alert('Vui lòng nhập Prompt AI.');
            return;
        }
        socket.emit('ai:start', options);
    });
    elements.pauseButton.addEventListener('click', () => {
        const isCurrentlyPaused = elements.pauseButton.textContent.trim() === 'Tiếp tục';
        socket.emit(isCurrentlyPaused ? 'ai:resume' : 'ai:pause');
    });
    elements.stopButton.addEventListener('click', () => socket.emit('ai:stop'));

    socket.on('ai-state', ui.renderState.bind(ui));
    socket.on('ai-log', ui.logToUI.bind(ui));
    socket.on('ai-progress', (progress) => ui.updateProgressBar(progress, 'running'));
    socket.on('ai-movie-processed', ui.addResultRow.bind(ui));
    socket.on('ai-start', (data) => {
        ui.updateProgressBar({ processed: 0, total: data.total, success: 0, errors: 0 }, 'running');
    });
    socket.on('ai-finished', (status) => {
        socket.emit('ai:get-state');
    });
    
    // Yêu cầu trạng thái ban đầu
    socket.emit('ai:get-state');
});
</script>